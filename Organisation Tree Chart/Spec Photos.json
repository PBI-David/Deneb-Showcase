{
  "$schema": "https://vega.github.io/schema/vega/v6.json",
  "description": "Zoomable, collapsable tree by David Bacci: https://www.linkedin.com/in/davbacci/",
  "width": {"signal": "1400"},
  "height": {"signal": "900"},
  "background": "#f5f5f5",
  "autosize": "pad",
  "padding": 5,
  "signals": [
    {"name": "nodeWidth", "value": 220},
    {"name": "nodeHeight", "value": 65},
    {"name": "imageDiameter", "value": 40},
    {"name": "verticalNodeGap", "value": 25},
    {"name": "horizontalNodeGap", "value": 140},
    {
      "name": "startingDepth",
      "value": 1,
      "on": [{"events": {"type": "timer", "throttle": 0}, "update": "-1"}]
    },
    {
      "name": "node",
      "value": 0,
      "on": [
        {
          "events": {"type": "click", "markname": "node"},
          "update": "xy()[0]==down[0]&&xy()[1]==down[1]?datum.id:0"
        }
      ]
    },
    {
      "name": "nodeHighlight",
      "value": "[0]",
      "on": [
        {
          "events": {"type": "mouseover", "markname": "node"},
          "update": "pluck(treeAncestors('treeCalcs', datum.id), 'id')"
        },
        {"events": {"type": "mouseout"}, "update": "[0]"}
      ]
    },
    {
      "name": "isExpanded",
      "value": 0,
      "on": [
        {
          "events": {"type": "click", "markname": "node"},
          "update": "datum.children > 0 && indata('treeClickStorePerm', 'id', datum.childrenIds[0])?true:false"
        }
      ]
    },
    {"name": "xrange", "update": "[0, width]"},
    {"name": "yrange", "update": "[0, height]"},
    {
      "name": "down",
      "value": null,
      "on": [
        {"events": "touchend", "update": "null"},
        {"events": "mousedown, touchstart", "update": "xy()"}
      ]
    },
    {
      "name": "xcur",
      "value": null,
      "on": [
        {"events": "mousedown, touchstart, touchend", "update": "slice(xdom)"}
      ]
    },
    {
      "name": "ycur",
      "value": null,
      "on": [
        {"events": "mousedown, touchstart, touchend", "update": "slice(ydom)"}
      ]
    },
    {
      "name": "delta",
      "value": [0, 0],
      "on": [
        {
          "events": [
            {
              "source": "window",
              "type": "mousemove",
              "consume": true,
              "between": [
                {"type": "mousedown"},
                {"source": "window", "type": "mouseup"}
              ]
            },
            {
              "type": "touchmove",
              "consume": true,
              "filter": "event.touches.length === 1"
            }
          ],
          "update": "down ? [down[0]-x(), down[1]-y()] : [0,0]"
        }
      ]
    },
    {
      "name": "anchor",
      "value": [0, 0],
      "on": [
        {
          "events": "wheel",
          "update": "[invert('xscale', x()), invert('yscale', y())]"
        },
        {
          "events": {
            "type": "touchstart",
            "filter": "event.touches.length===2"
          },
          "update": "[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]"
        }
      ]
    },
    {"name": "xext", "update": "[0,width]"},
    {"name": "yext", "update": "[0,height]"},
    {
      "name": "zoom",
      "value": 1,
      "on": [
        {
          "events": "wheel!",
          "force": true,
          "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
        },
        {
          "events": {"signal": "dist2"},
          "force": true,
          "update": "dist1 / dist2"
        }
      ]
    },
    {
      "name": "clipCorrection",
      "description": "There is a bug in the Vega SVG renderer that means the group cliiping mask doesn update. This is a workaround.",
      "value": true,
      "on": [
        {"events": "wheel,dblclick", "update": "true"},
        {"events": {"type": "timer", "throttle": 0}, "update": "false"}
      ]
    },
    {
      "name": "dist1",
      "value": 0,
      "on": [
        {
          "events": {
            "type": "touchstart",
            "filter": "event.touches.length===2"
          },
          "update": "pinchDistance(event)"
        },
        {"events": {"signal": "dist2"}, "update": "dist2"}
      ]
    },
    {
      "name": "dist2",
      "value": 0,
      "on": [
        {
          "events": {
            "type": "touchmove",
            "consume": true,
            "filter": "event.touches.length===2"
          },
          "update": "pinchDistance(event)"
        }
      ]
    },
    {
      "name": "xdom",
      "update": "slice(xext)",
      "on": [
        {
          "events": {"signal": "delta"},
          "update": "[xcur[0] + span(xcur) * delta[0] / width, xcur[1] + span(xcur) * delta[0] / width]"
        },
        {
          "events": {"signal": "zoom"},
          "update": "[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"
        },
        {"events": "dblclick", "update": "item().mark?xdom: [0,width]"}
      ]
    },
    {
      "name": "ydom",
      "update": "slice(yext)",
      "on": [
        {
          "events": {"signal": "delta"},
          "update": "[ycur[0] + span(ycur) * delta[1] / height, ycur[1] + span(ycur) * delta[1] / height]"
        },
        {
          "events": {"signal": "zoom"},
          "update": "[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"
        },
        {"events": "dblclick", "update": "item().mark?ydom:[0,height]"}
      ]
    },
    {"name": "scaledNodeWidth", "update": "(nodeWidth/ span(xdom))*width"},
    {
      "name": "scaledNodeHeight",
      "update": "abs(nodeHeight/ span(ydom))*height"
    },
    {"name": "scaledFont13", "update": "(13/ span(xdom))*width"},
    {"name": "scaledFont12", "update": "(12/ span(xdom))*width"},
    {"name": "scaledFont11", "update": "(11/ span(xdom))*width"},
    {"name": "scaledKPIHeight", "update": "(5/ span(xdom))*width"},
    {
      "name": "scaledImageDiameter",
      "update": "(imageDiameter/ span(xdom))*width"
    },
    {
      "name": "scaledLimit",
      "update": "scaledNodeWidth-scaledImageDiameter-((10/ span(xdom))*width)"
    }
  ],
  "data": [
    {
      "name": "source",
      "url": "https://raw.githubusercontent.com/PBI-David/Deneb-Showcase/main/Organisation%20Tree%20Chart/data.json"
    },
    {
      "name": "wideToTall",
      "source": "source",
      "transform": [
        {
          "type": "formula",
          "expr": "{depth:1, key: datum.level1,parent: null, person:datum.person, kpi:datum.kpi, image:datum.image}",
          "as": "l1"
        },
        {
          "type": "formula",
          "expr": "{depth:2, key: datum.level1+ '|'+datum.level2,parent: datum.level1, person:datum.person, kpi:datum.kpi, image:datum.image}",
          "as": "l2"
        },
        {
          "type": "formula",
          "expr": "{depth:3, key:datum.level1 + '|'+datum.level2+ '|'+datum.level3,parent: datum.level1+ '|'+datum.level2, person:datum.person, kpi:datum.kpi, image:datum.image}",
          "as": "l3"
        },
        {
          "type": "formula",
          "expr": "{depth:4, key:datum.level1 + '|'+datum.level2+ '|'+datum.level3+ '|'+ datum.level4,parent: datum.level1 + '|'+datum.level2+ '|'+datum.level3, person:datum.person, kpi:datum.kpi, image:datum.image}",
          "as": "l4"
        },
        {
          "type": "formula",
          "expr": "{depth:5, key:datum.level1 + '|'+datum.level2+ '|'+datum.level3+ '|'+ datum.level4+ '|'+ datum.level5,parent: datum.level1 + '|'+datum.level2+ '|'+datum.level3+ '|'+ datum.level4, person:datum.person, kpi:datum.kpi, image:datum.image}",
          "as": "l5"
        },
        {"type": "fold", "fields": ["l1", "l2", "l3", "l4", "l5"]},
        {"type": "project", "fields": ["key", "value"]},
        {
          "type": "formula",
          "expr": "reverse(split(datum.value.key,'|'))[0]",
          "as": "title"
        },
        {
          "type": "filter",
          "expr": "datum.title != 'null' && datum.title != 'undefined' && datum.title != ''"
        },
        {"type": "formula", "expr": "datum.value.person", "as": "person"},
        {"type": "formula", "expr": "datum.value.depth", "as": "depth"},
        {
          "type": "aggregate",
          "groupby": ["person"],
          "ops": ["argmax"],
          "fields": ["depth"],
          "as": ["value"]
        },
        {"type": "formula", "expr": "datum.value.value", "as": "value"},
        {"type": "formula", "expr": "datum.value.key", "as": "id"},
        {"type": "formula", "expr": "datum.value.parent", "as": "parent"},
        {"type": "formula", "expr": "datum.value.person", "as": "person"},
        {"type": "formula", "expr": "datum.value.kpi", "as": "kpi"},
        {
          "type": "formula",
          "expr": "reverse(split(datum.value.key,'|'))[0]",
          "as": "title"
        },
        {
          "type": "formula",
          "expr": "'https://raw.githubusercontent.com/PBI-David/Deneb-Showcase/refs/heads/main/Organisation%20Tree%20Chart/Images/'+ datum.value.image",
          "as": "image"
        },
        {
          "type": "collect",
          "sort": {
            "field": ["value.depth", "person"],
            "order": ["ascending", "descending"]
          }
        }
      ]
    },
    {
      "name": "treeCalcs",
      "source": "wideToTall",
      "transform": [
        {"type": "stratify", "key": "id", "parentKey": "parent"},
        {
          "type": "tree",
          "method": {"signal": "'tidy'"},
          "separation": {"signal": "false"},
          "as": ["y", "x", "depth", "children"]
        },
        {"as": "parent", "type": "formula", "expr": "datum.parent"}
      ]
    },
    {
      "name": "treeChildren",
      "source": "treeCalcs",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["parent"],
          "fields": ["parent"],
          "ops": ["values"],
          "as": ["childrenObjects"]
        },
        {
          "type": "formula",
          "expr": "pluck(datum.childrenObjects,'id')",
          "as": "childrenIds"
        }
      ]
    },
    {
      "name": "treeAncestors",
      "source": "treeCalcs",
      "transform": [
        {
          "type": "formula",
          "as": "treeAncestors",
          "expr": "treeAncestors('treeCalcs', datum.id, 'root')"
        },
        {"type": "flatten", "fields": ["treeAncestors"]},
        {
          "type": "formula",
          "expr": "datum.treeAncestors.parent",
          "as": "allParents"
        }
      ]
    },
    {
      "name": "treeChildrenAll",
      "source": "treeAncestors",
      "transform": [
        {
          "type": "project",
          "fields": [
            "allParents",
            "id",
            "name",
            "parent",
            "x",
            "y",
            "depth",
            "children"
          ]
        },
        {
          "type": "aggregate",
          "fields": ["parent", "parent", "id"],
          "ops": ["values", "count", "min"],
          "groupby": ["allParents"],
          "as": ["allChildrenObjects", "allChildrenCount", "id"]
        },
        {
          "type": "formula",
          "expr": "pluck(datum.allChildrenObjects,'id')",
          "as": "allChildrenIds"
        }
      ]
    },
    {
      "name": "treeClickStoreTemp",
      "source": "treeAncestors",
      "transform": [
        {
          "type": "filter",
          "expr": "startingDepth!=-1?datum.depth <= startingDepth:node !=0 && !isExpanded? datum.parent == node: node !=0 && isExpanded? datum.allParents == node:false"
        },
        {
          "type": "aggregate",
          "groupby": ["id", "person", "parent", "x", "y", "depth", "children"]
        }
      ]
    },
    {
      "name": "treeClickStorePermBackup",
      "values": [],
      "on": [
        {"trigger": "startingDepth>=0", "insert": "data('treeClickStoreTemp')"},
        {
          "trigger": "node && !isExpanded ",
          "insert": "data('treeClickStoreTemp')"
        },
        {
          "trigger": "node && isExpanded",
          "remove": "data('treeClickStoreTemp')"
        }
      ]
    },
    {
      "name": "treeClickStorePerm",
      "values": [],
      "on": [
        {"trigger": "startingDepth>=0", "insert": "data('treeClickStoreTemp')"},
        {
          "trigger": "node && !isExpanded ",
          "insert": "data('treeClickStoreTemp')"
        },
        {
          "trigger": "node && isExpanded",
          "remove": "data('treeClickStoreTemp')"
        },
        {"trigger": "clipCorrection==true", "remove": "true"},
        {
          "trigger": "clipCorrection==false",
          "insert": "data('treeClickStorePermBackup')"
        }
      ]
    },
    {
      "name": "treeLayout",
      "source": "wideToTall",
      "transform": [
        {
          "type": "filter",
          "expr": "indata('treeClickStorePerm', 'id', datum.id)"
        },
        {"type": "stratify", "key": "id", "parentKey": "parent"},
        {
          "type": "tree",
          "method": {"signal": "'tidy'"},
          "nodeSize": [
            {"signal": "nodeHeight+verticalNodeGap"},
            {"signal": "nodeWidth+horizontalNodeGap"}
          ],
          "separation": {"signal": "false"},
          "as": ["y", "x", "depth", "children"]
        },
        {"type": "formula", "expr": "datum.y+(height/2)", "as": "y"},
        {"type": "formula", "expr": "scale('xscale',datum.x)", "as": "xscaled"},
        {"as": "parent", "type": "formula", "expr": "datum.parent"}
      ]
    },
    {
      "name": "fullTreeLayout",
      "source": "treeLayout",
      "transform": [
        {
          "type": "lookup",
          "from": "treeChildren",
          "key": "parent",
          "fields": ["id"],
          "values": ["childrenObjects", "childrenIds"]
        },
        {
          "type": "lookup",
          "from": "treeChildrenAll",
          "key": "allParents",
          "fields": ["id"],
          "values": ["allChildrenIds", "allChildrenObjects"]
        },
        {
          "type": "lookup",
          "from": "treeCalcs",
          "key": "id",
          "fields": ["id"],
          "values": ["children"]
        },
        {
          "type": "formula",
          "expr": "reverse(pluck(treeAncestors('treeCalcs', datum.id), 'id'))[1]",
          "as": "treeParent"
        }
      ]
    },
    {
      "name": "visibleNodes",
      "source": "fullTreeLayout",
      "transform": [
        {
          "type": "filter",
          "expr": "indata('treeClickStorePerm', 'id', datum.id)"
        }
      ]
    },
    {
      "name": "maxWidthAndHeight",
      "source": "visibleNodes",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["depth"],
          "fields": ["depth", "x", "y"],
          "ops": ["count", "max", "max"],
          "as": ["count", "x", "y"]
        },
        {
          "type": "aggregate",
          "fields": ["depth", "count", "x", "y"],
          "ops": ["max", "max", "max", "max"],
          "as": ["maxDepth", "maxNodes", "maxX", "maxY"]
        }
      ]
    },
    {
      "name": "links",
      "source": "treeLayout",
      "transform": [
        {"type": "treelinks"},
        {
          "type": "linkpath",
          "orient": "horizontal",
          "shape": "diagonal",
          "sourceY": {"expr": "scale('yscale', datum.source.y)"},
          "sourceX": {"expr": "scale('xscale', datum.source.x+nodeWidth)"},
          "targetY": {"expr": "scale('yscale', datum.target.y)"},
          "targetX": {"expr": "scale('xscale', datum.target.x)"}
        },
        {
          "type": "filter",
          "expr": " indata('treeClickStorePerm', 'id', datum.target.id)"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "xscale",
      "zero": false,
      "domain": {"signal": "xdom"},
      "range": {"signal": "xrange"}
    },
    {
      "name": "yscale",
      "zero": false,
      "domain": {"signal": "ydom"},
      "range": {"signal": "yrange"}
    },
    {
      "name": "kpiscale",
      "zero": false,
      "domain": [0, 100],
      "range": {"signal": "[0,scaledNodeWidth]"}
    },
    {
      "name": "colour",
      "type": "ordinal",
      "range": [
        "#6f6f6f",
        "#4472C4",
        "#3A8E50",
        "#ED7D31",
        "#a63939",
        "#6338a6",
        "#3843a6",
        "#38a695"
      ],
      "domain": {"data": "visibleNodes", "field": "treeParent"}
    }
  ],
  "marks": [
    {
      "type": "path",
      "interactive": false,
      "from": {"data": "links"},
      "encode": {
        "update": {
          "path": {"field": "path"},
          "strokeWidth": {
            "signal": "indexof(nodeHighlight, datum.target.id)> -1? 2.5:0.4"
          },
          "stroke": {
            "scale": "colour",
            "signal": "reverse(pluck(treeAncestors('treeCalcs', datum.target.id), 'id'))[1]"
          }
        }
      }
    },
    {
      "name": "node",
      "description": "The parent node",
      "type": "group",
      "clip": false,
      "from": {"data": "visibleNodes"},
      "encode": {
        "update": {
          "x": {"field": "x", "scale": "xscale"},
          "width": {"signal": "scaledNodeWidth"},
          "yc": {"field": "y", "scale": "yscale"},
          "height": {"signal": "scaledNodeHeight"},
          "fill": {
            "signal": "merge(hsl(scale('colour', datum.treeParent)), {l:0.94})"
          },
          "stroke": {
            "signal": "merge(hsl(scale('colour', datum.treeParent)), {l:0.79})"
          },
          "strokeWidth": {"value": 1},
          "cornerRadius": {"value": 2},
          "cursor": {"signal": "datum.children>0?'pointer':''"},
          "tooltip": {"signal": ""}
        }
      },
      "marks": [
        {
          "name": "highlight",
          "description": "highlight (seems like a Vega bug as this doens't work on the group element)",
          "type": "rect",
          "interactive": false,
          "encode": {
            "update": {
              "x": {"signal": "item.mark.group.x1"},
              "y": {"signal": "0"},
              "fill": {
                "signal": "indexof(nodeHighlight, parent.id)> -1? merge(hsl(scale('colour', parent.treeParent)), {l:0.82}):0"
              },
              "stroke": {
                "signal": "indexof(nodeHighlight, parent.id)> -1? merge(hsl(scale('colour', parent.treeParent)), {l:0.79}):0"
              },
              "height": {"signal": "item.mark.group.height"},
              "width": {"signal": "item.mark.group.width"}
            }
          }
        },
        {
          "name": "KPI background",
          "description": "KPI background",
          "type": "rect",
          "interactive": false,
          "clip": true,
          "encode": {
            "update": {
              "x": {"signal": "item.mark.group.x1"},
              "y": {"signal": "item.mark.group.height-scaledKPIHeight"},
              "height": {"signal": "scaledKPIHeight"},
              "width": {"signal": "(item.mark.group.width)"},
              "fill": {"scale": "colour", "signal": "parent.treeParent"},
              "opacity": {"value": 0.2}
            }
          }
        },
        {
          "name": "KPI",
          "description": "KPI",
          "type": "rect",
          "interactive": false,
          "clip": true,
          "encode": {
            "update": {
              "x": {"signal": "item.mark.group.x1"},
              "y": {"signal": "item.mark.group.height-scaledKPIHeight"},
              "height": {"signal": "scaledKPIHeight"},
              "width": {"signal": "scale('kpiscale',parent.kpi)"},
              "fill": {"scale": "colour", "signal": "parent.treeParent"}
            }
          }
        },
        {
          "type": "text",
          "interactive": false,
          "name": "name",
          "encode": {
            "update": {
              "x": {"signal": "((15/ span(xdom))*width)+scaledImageDiameter"},
              "y": {
                "signal": "((scaledNodeHeight-scaledKPIHeight)/2)-(scaledImageDiameter*0.2)"
              },
              "fontWeight": {"value": "600"},
              "baseline": {"value": "middle"},
              "fill": {"scale": "colour", "signal": "parent.treeParent"},
              "text": {"signal": "parent.person"},
              "fontSize": {"signal": "scaledFont13"},
              "limit": {"signal": "scaledLimit"},
              "font": {"value": "Calibri"}
            }
          }
        },
        {
          "type": "text",
          "interactive": false,
          "name": "title",
          "encode": {
            "update": {
              "x": {"signal": "((15/ span(xdom))*width)+scaledImageDiameter"},
              "y": {
                "signal": "((scaledNodeHeight-scaledKPIHeight)/2)+(scaledImageDiameter*0.2)"
              },
              "align": {"value": "left"},
              "baseline": {"value": "middle"},
              "fill": {"signal": "'#4D4B44'"},
              "text": {"signal": "parent.title"},
              "fontSize": {"signal": "scaledFont11"},
              "limit": {"signal": "scaledLimit"},
              "font": {"value": "Calibri"}
            }
          }
        },
        {
          "type": "text",
          "interactive": false,
          "name": "node children",
          "encode": {
            "update": {
              "x": {"signal": "item.mark.group.width - (9/ span(xdom))*width"},
              "y": {"signal": "item.mark.group.height/2"},
              "align": {"value": "right"},
              "baseline": {"value": "middle"},
              "fill": {"scale": "colour", "signal": "parent.treeParent"},
              "text": {"signal": "parent.children>0?parent.children:''"},
              "fontSize": {"signal": "scaledFont12"},
              "font": {"value": "Calibri"}
            }
          }
        },
        {
          "name": "imageClip",
          "description": "Clips the image to a circle",
          "type": "group",
          "interactive": false,
          "encode": {
            "update": {
              "x": {"signal": "(8/ span(xdom))*width"},
              "width": {"signal": "scaledImageDiameter"},
              "yc": {"signal": "((item.mark.group.height-scaledKPIHeight)/2)"},
              "height": {"signal": "scaledImageDiameter"},
              "stroke": {
                "signal": "merge(hsl(scale('colour', item.mark.group.datum.treeParent)), {l:0.79})"
              },
              "strokeWidth": {"value": 4},
              "cornerRadius": {"value": 5000}
            }
          },
          "marks": [
            {
              "name": "image",
              "description": "The profile image",
              "clip": true,
              "type": "image",
              "interactive": false,
              "encode": {
                "update": {
                  "x": {"signal": "scaledImageDiameter/2"},
                  "y": {"signal": "scaledImageDiameter/2"},
                  "url": {"signal": "item.mark.group.mark.group.datum.image"},
                  "width": {"signal": "scaledImageDiameter"},
                  "aspect": {"signal": "true"},
                  "align": {"value": "center"},
                  "baseline": {"value": "middle"}
                }
              }
            }
          ]
        }
      ]
    }
  ]
}